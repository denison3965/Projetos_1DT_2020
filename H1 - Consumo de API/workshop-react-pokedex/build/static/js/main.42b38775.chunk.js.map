{"version":3,"sources":["Componentes/Header.jsx","Componentes/Busca.jsx","Componentes/Condicional.jsx","Componentes/Card.jsx","Componentes/Home.jsx","Componentes/Footer.jsx","Componentes/Pokedex.jsx","App.jsx","serviceWorker.js","index.js"],"names":["props","children","className","type","value","valor","onChange","eventoChange","onKeyPress","eventoPrincipal","placeholder","onClick","condicao","Card","fetchPokemon","a","i","fetch","res","json","tipos","types","map","name","tiposSpan","length","pokemon","nome","id","numero","toString","padStart","pokemons","state","push","setState","alert","renderizarPokemon","titulo","replace","caminho","altImg","legenda","componentDidMount","isHome","localStorage","buscarPokemon","classes","atualizarValor","evento","target","Number","isNaN","find","item","toLowerCase","eventoBusca","trim","key","this","Condicional","src","alt","Component","href","Pokedex","estrutura","Array","fill","req","to","path","exact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42b38775.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Header.css\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <header>\r\n            <h1>Pokédex React</h1>\r\n            <nav>\r\n                {props.children}\r\n            </nav>\r\n        </header>\r\n    );\r\n    \r\n}","import React from \"react\";\r\nimport \"../css/Busca.css\";\r\n\r\nexport default (props) => (\r\n    <div className=\"centralizar buscaContainer\">\r\n        <input type=\"text\" className=\"col-4\" value={props.valor} onChange={props.eventoChange} onKeyPress={props.eventoPrincipal} placeholder=\"#025\"/>\r\n        <button type=\"button\" className=\"col-2\" onClick={props.eventoPrincipal}>Buscar</button>\r\n    </div>\r\n);\r\n","export default (props) => {\r\n    if (props.condicao){\r\n        return props.children;\r\n    }\r\n    else{\r\n        return \"\";\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Busca from \"./Busca\";\r\nimport Condicional from \"./Condicional\";\r\nimport \"../css/Card.css\";\r\n\r\nexport default class Card extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            classes: this.props.classes,\r\n            isHome: this.props.isHome,\r\n            valor: \"\",\r\n            pokemons: [],\r\n            titulo: this.props.titulo || \"Carregando dados...\",\r\n            caminho: this.props.caminho || \"img/pokebola.png\",\r\n            altImg: this.props.altImg || \"Carregando\",\r\n            numero: this.props.numero || \"???\",\r\n            legenda: this.props.legenda || \"Busque pelos primeiros #151 Pokémons!\"\r\n        }\r\n    }\r\n\r\n    fetchPokemon = async () => {\r\n        try {\r\n            for(let i = 1; i <= 151; i++) {\r\n                const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${i}`);\r\n                const json = await res.json();\r\n        \r\n                const tipos = json.types.map((type) => type.type.name);\r\n                let tiposSpan;\r\n        \r\n                if (tipos.length === 1) {\r\n                    tiposSpan = (\r\n                        <span className=\"tipos\">\r\n                            <span className={tipos[0]}>{tipos[0]}</span>\r\n                        </span>\r\n                    );\r\n                } else {\r\n                    tiposSpan = (\r\n                        <span className=\"tipos\">\r\n                            <span className={tipos[0]}>{`${tipos[0]} `}</span>|\r\n                            <span className={tipos[1]}>{` ${tipos[1]}`}</span>\r\n                        </span>\r\n                    );\r\n                }\r\n        \r\n                const pokemon = {\r\n                    nome: json.name,\r\n                    id: json.id,\r\n                    numero: `#${json.id.toString().padStart(3, '0')}`,\r\n                    tipos: tiposSpan\r\n                }\r\n        \r\n                const pokemons = [...this.state.pokemons];\r\n                pokemons.push(pokemon);\r\n                this.setState({ pokemons });\r\n            }\r\n        } catch (erro) {\r\n            alert(erro);\r\n        }\r\n    }\r\n\r\n    renderizarPokemon = (pokemon) => {\r\n        // Joga os valores no card\r\n        this.setState({\r\n            titulo: pokemon.nome.replace(\"-\", \" \"),\r\n            caminho: `img/${pokemon.nome}.png`,\r\n            altImg: pokemon.nome,\r\n            numero: pokemon.numero,\r\n            legenda: pokemon.tipos\r\n        });\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        // Testa se tá na home por causa da animação\r\n        if (this.state.isHome) {\r\n            // Faz a requisição de todos os pokemons e espera ela ser completada\r\n            await this.fetchPokemon();\r\n\r\n            // Confere se tem dados no localStorage\r\n            if (localStorage[\"ultimaBusca\"]) {\r\n                // Se tiver ele pega e joga na variável pokemon\r\n                const pokemon = localStorage[\"ultimaBusca\"];\r\n                // Depois busca o pokemon que foi tirado do localStorage\r\n                this.buscarPokemon(pokemon);\r\n            } else {\r\n                // Mostra valores padrões\r\n                this.setState({\r\n                    titulo: \"Buscar Pokémons\",\r\n                    caminho: \"img/nao-encontrado.png\",\r\n                    altImg: \"Pokémon não encontrado\"\r\n                });\r\n            }\r\n\r\n            // Remove a animação de carregamento\r\n            const classes = this.state.classes.replace(\"carregando-home\", \"\");\r\n            this.setState({ classes });\r\n        }\r\n    }\r\n\r\n    atualizarValor = (evento) => {\r\n        const valor = evento.target.value;\r\n\r\n        /* \r\n        * Isso aqui é uma validação pra ver se alguém tá digitando número maior que 151\r\n        *\r\n        * valor.replace(\"#\", \"\") -- Primeiro limpo o \"#\" do número, pra caso alguém digite #025\r\n        *\r\n        * Number(valor.replace(\"#\", \"\")) -- Segundo converto o valor limpo pra Number\r\n        * isso vai limpar os 0 na esquerda\r\n        */\r\n        const numero = Number(valor.replace(\"#\", \"\"));\r\n    \r\n        /*\r\n        * isNaN(numero) -- Terceiro eu vejo se o const numero vai ser igual a \"Not a Number\"\r\n        * No caso letra não é número, então da true, numero dá falso\r\n        * \r\n        * !isNaN(numero) -- Depois eu inverto o valor com \"!\"\r\n        * No caso o false vira true e o true vira falso\r\n        * \r\n        * Caso dê falso é por que alguém tá digitando uma palavra, então cai no else\r\n        */\r\n        if (!isNaN(numero)) {\r\n            if (numero >= 0 && numero < 152) {\r\n                this.setState({ valor });\r\n            }\r\n        } else {\r\n            this.setState({ valor });\r\n        }\r\n    }\r\n\r\n    buscarPokemon = (valor) => {\r\n        // Remove a classe de erro e escreve a mensagem padrão\r\n        const classes = this.state.classes.replace(\"erro\", \"\");\r\n        this.setState({ classes, legenda: \"Busque pelos primeiros #151 Pokémons!\" });\r\n\r\n        /*\r\n        * Busca (find) na lista dos pokémons um pokémon que tenha\r\n        * Ou o id igual ao valor convertido para número\r\n        * Ou o nome sem \"-\" e em minúsculo igual ao valor em minúsculo\r\n        * Caso um dos casos acima seja verdadeiro ele retorna o pokemon\r\n        * Caso todos sejam falso ele retorn undefined\r\n        */\r\n        const pokemon = this.state.pokemons.find((item) => (\r\n            item.id === Number(valor) ||\r\n            item.nome.replace(\"-\", \" \").toLowerCase() === valor.toLowerCase()\r\n        ));\r\n\r\n        /*\r\n        * Valor undefined é igual a false\r\n        * então se o find retornar undefined ele cai no else\r\n        */\r\n        if (pokemon) {\r\n            // Renderiza o pokemon no card\r\n            this.renderizarPokemon(pokemon);\r\n\r\n            // Salva no localStorage\r\n            localStorage[\"ultimaBusca\"] = pokemon.nome;\r\n        } else {\r\n            // Adiciona a classe de erro e troca os valores dos elementos\r\n            const classes = `${this.state.classes} erro`;\r\n            this.setState({\r\n                titulo: \"Buscar Pokémons\",\r\n                caminho: \"img/nao-encontrado.png\",\r\n                altImg: \"Pokémon não encontrado\",\r\n                legenda: \"Valor digitado não é válido!\",\r\n                numero: \"???\",\r\n                classes\r\n            });\r\n        }\r\n    }\r\n\r\n    eventoBusca = (evento) => {\r\n        // Limpo o valor digitado pra ficar sem \"#\" no número e sem espaço no começo\r\n        const valor = this.state.valor.replace(\"#\", \"\").trim();\r\n\r\n        // Testo se alguém apertou \"Enter\" ou se clicou no botão\r\n        if(evento.key === \"Enter\" || evento.type === \"click\") {\r\n            this.buscarPokemon(valor);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`${this.state.classes} Card`}>\r\n                <Condicional condicao={this.state.isHome}>\r\n                    <h1>{this.state.titulo}</h1>\r\n                </Condicional>\r\n                \r\n                <Condicional condicao={!this.state.isHome}>\r\n                    <h2>{this.state.titulo}</h2>\r\n                </Condicional>\r\n                \r\n                <div className=\"container-img centralizar\">\r\n                    <img src={this.state.caminho} alt={this.state.altImg}/>\r\n                </div>\r\n    \r\n                <p className=\"numero\"><span>{this.state.numero}</span></p>\r\n    \r\n                <p className=\"legenda\">{this.state.legenda}</p>\r\n                <Condicional condicao={this.state.isHome}>\r\n                    <Busca valor={this.state.valor} eventoChange={this.atualizarValor} eventoPrincipal={this.eventoBusca} />\r\n                </Condicional>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default () => {\r\n    return (\r\n        <main className=\"container centralizar\">\r\n            <Card isHome={true} classes={\"carregando-home col-6\"}/>\r\n        </main>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"../css/Footer.css\";\r\n\r\nexport default () => {\r\n    return (\r\n        <footer>\r\n            <h1>Workshop React - SENAI Suíço-Brasileira</h1>\r\n            <ul className=\"container\">\r\n                <li className=\"col-4\"><span>Paulo Henrique</span> <a href=\"https://github.com/henrique1204\"><span>Henrique1204</span></a></li>\r\n                <li className=\"col-4\"><span>Rebecca Ramos</span> <a href=\"https://github.com/ramos-r\"><span>ramos-r</span></a></li>\r\n                <li className=\"col-4\"><span>José Carlos</span> <a href=\"https://github.com/JoseCarlos69\"><span>JoseCarlos69</span></a></li>\r\n                <li className=\"col-4\"><span>Felipe Braga</span> <a href=\"https://github.com/obragaa\"><span>obragaa</span></a></li>\r\n                <li className=\"col-4\"><span>Geovanna Caserta</span> <a href=\"https://github.com/gkslima\"><span>gkslima</span></a></li>\r\n                <li className=\"col-4\"><span>Geovanne Sousa</span> <a href=\"https://github.com/Neutro17\"><span>Neutro17</span></a></li>\r\n            </ul>\r\n        </footer>\r\n    )\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../css/Pokedex.css\";\r\n\r\nexport default class Pokedex extends Component  {\r\n    estrutura = (\r\n        <li>\r\n            <Card isHome={false} classes=\"carregando\" titulo=\"???\" caminho=\"img/pokebola.png\" altImg=\"Pokebola\" numero=\"#???\" legenda=\"???\" />\r\n        </li>\r\n    );\r\n\r\n    state = {\r\n        pokemons: Array(151).fill(this.estrutura)\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        for(let i = 0; i < this.state.pokemons.length; i++) {\r\n            const req = await fetch(`https://pokeapi.co/api/v2/pokemon/${i + 1}`)\r\n            const json = await req.json();\r\n        \r\n            const tipos = json.types.map((type) => type.type.name);\r\n            let tiposSpan;\r\n    \r\n            if (tipos.length === 1) {\r\n                tiposSpan = (\r\n                    <span className=\"tipos\">\r\n                        <span className={tipos[0]}>{tipos[0]}</span>\r\n                    </span>\r\n                );\r\n            } else {\r\n                tiposSpan = (\r\n                    <span className=\"tipos\">\r\n                        <span className={tipos[0]}>{`${tipos[0]} `}</span>|\r\n                        <span className={tipos[1]}>{` ${tipos[1]}`}</span>\r\n                    </span>\r\n                );\r\n            }\r\n\r\n            const pokemons = [...this.state.pokemons];\r\n            pokemons[i] = (\r\n                <li key={json.id}>\r\n                    <Card\r\n                        isHome={false}\r\n                        titulo={json.name}\r\n                        caminho={`img/${json.name}.png`}\r\n                        altImg={json.name}\r\n                        numero={`#${json.id.toString().padStart(3, '0')}`}\r\n                        legenda={tiposSpan}\r\n                    />\r\n                </li>\r\n            );\r\n\r\n            this.setState({ pokemons });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"Pokedex\">\r\n                <h1>Pokedex 1º Geração</h1>\r\n                <ul className=\"centralizar lista\">\r\n                    {this.state.pokemons.map((item) => (item))}\r\n                </ul>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport Header from \"./Componentes/Header\";\r\nimport Home from \"./Componentes/Home\";\r\nimport Footer from \"./Componentes/Footer\";\r\nimport Pokedex from \"./Componentes/Pokedex\";\r\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\r\n\r\nexport default () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Fragment>\r\n                <Header>\r\n                    <ul className=\"centralizar\">\r\n                        <li><Link to=\"/\"><span>Home</span></Link></li>\r\n                        <li><Link to=\"/pokedex\"><span>Pokedex</span></Link></li>\r\n                    </ul>\r\n                </Header>\r\n                \r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Home}></Route>\r\n                    <Route path=\"/pokedex\" component={Pokedex}></Route>\r\n                </Switch>\r\n\r\n                <Footer />\r\n            </Fragment>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}